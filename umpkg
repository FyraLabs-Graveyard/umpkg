#!/usr/bin/python3

import koji
import typer
import os
import sys
import umpkg_cli.cfg as config
import umpkg_cli.util as util
import umpkg_cli.rpm_util as rpm_util

import umpkg_cli.koji_util as koji_util

cfg = config.read_config()
globalCfg = config.readGlobalConfig()

app = typer.Typer()
app.add_typer(koji_util.app, name='koji', help='Koji build system commands')
app.add_typer(config.app, name='config', help='Configuration commands')
@app.command()
def buildsrc(
    path: str = typer.Argument(None, help="The path to the package"),
):
    """
    Builds a source RPM from a spec file
    """
    command = util.Command()
    if not path:
        # split the spec names by space
        specs = cfg['spec'].split(' ')
        for spec in specs:
            # add .spec to the spec name if it's not already there
            if not spec.endswith('.spec'):
                spec += '.spec'
            if os.path.exists(spec):
                srpm = command.buildSrc(spec)
            else:
                print(f'Spec {spec} not found')
                sys.exit(1)
    else:
        if not path.endswith('.spec'):
            path += '.spec'
        if os.path.exists(path):
            srpm = command.buildSrc(path)
        else:
            print(f'Spec {path} not found')
            sys.exit(1)

@app.command()
def build(
    path: str = typer.Argument(None, help="The path to the package"),
):
    """
    Builds a package from source
    """
    command = util.Command()
    if not path:
        # split the spec names by space
        specs = cfg['spec'].split(' ')
        for spec in specs:
            # add .spec to the spec name if it's not already there
            if not spec.endswith('.spec'):
                spec += '.spec'
            if os.path.exists(spec):
                srpm = command.buildSrc(spec)
            else:
                print(f'Spec {spec} not found')
                sys.exit(1)
    else:
        if not path.endswith('.spec'):
            path += '.spec'
        if os.path.exists(path):
            srpm = command.buildSrc(path)
        else:
            print(f'Spec {path} not found')
            sys.exit(1)

    # now build it using mock. sorry folks too lazy to do it properly
    builder = rpm_util.Mock()
    builder.buildRPM(srpm)
@app.command()
def push(
    tag: str = typer.Argument(..., help="The Koji tag to push"),
    pkg: str = typer.Argument(None, help="The package name"),
):
    """
    Builds and pushes a package to Koji
    """
    command = util.Command()
    return command.push(tag, pkg)


@app.command()
def get(
    name: str = typer.Argument(..., help="The package name"),
):
    """
    Gets the package source from Ultramarine GitLab
    """
    return util.Command.pullGitlab(None, project=name)


@app.command()
def help(
    name: str = typer.Argument(None, help="The command to get help for"),
):
    """
    Displays help for the specified command
    """
    if name is None:
        app(args=['--help'])
    else:
        app(name)

if __name__ == "__main__":
    # run help if no arguments are passed
    if len(sys.argv) == 1:
        app(args=['--help'])
    else:
        app()
    